# Flask Web Application Development Rules

## Project Overview
You are developing a Flask-based web application for web crawling and video production using AI. The application should follow modern web development best practices with a focus on clean architecture, maintainability, and user experience.


#IMPORTANT
- ALWAYS DO NOT use emojis


## Technology Stack

### Backend
- **Package Manager**: uv (for fast Python package management)
- **Framework**: Flask (latest stable version)
- **Database**: PostgreSQL with SQLAlchemy ORM
- **Authentication**: Flask-Login with JWT tokens
- **Task Queue**: Celery with Redis
- **API Documentation**: Flask-RESTX or Flasgger
- **Testing**: pytest with coverage
- **Environment Management**: python-dotenv

### Frontend
- **UI Components**: shadcn/ui components
- **Styling**: Tailwind CSS
- **JavaScript**: Vanilla JS or Alpine.js for interactivity
- **Build Tool**: Vite for asset bundling
- **Icons**: Lucide icons
- **Fonts**: Inter or Pretendard for Korean support

## Code Style and Conventions

### Python/Flask Guidelines
1. **PEP 8 Compliance**: Follow PEP 8 style guide strictly
2. **Type Hints**: Use type hints for all function parameters and return values
3. **Docstrings**: Write comprehensive docstrings for all classes and functions
4. **Error Handling**: Implement proper error handling with custom exception classes
5. **Logging**: Use structured logging with appropriate log levels
6. **Configuration**: Use environment variables for all configuration
7. **Security**: Never hardcode secrets, use environment variables

### Project Structure
```
spectrum/
├── app/
│   ├── __init__.py        # Flask app factory
│   ├── models.py          # Database models
│   ├── routes/            # Route blueprints
│   │   ├── __init__.py
│   │   ├── main.py        # Main routes (home, dashboard)
│   │   ├── auth.py        # Authentication routes
│   │   └── api.py         # API endpoints
│   ├── services/          # Business logic
│   │   ├── __init__.py
│   │   ├── crawler.py     # Web crawling service
│   │   └── video.py       # Video generation service
│   └── utils.py           # Helper functions
├── static/                # Static files
│   └── uploads/          # User uploaded files
├── templates/             # HTML templates and assets
│   ├── layout/           # Layout templates
│   │   └── base.html     # Base layout
│   ├── pages/            # Page templates
│   │   ├── index.html    # Homepage
│   │   ├── dashboard.html# Dashboard
│   │   └── login.html    # Login page
│   ├── css/              # Stylesheets
│   │   ├── tailwind.css  # Tailwind utilities
│   │   └── main.css      # Custom styles
│   └── js/               # JavaScript
│       ├── app.js        # Main application JS
│       └── api.js        # API interactions
├── config.py             # Configuration
├── run.py                # Application entry point
├── pyproject.toml        # Dependencies (uv)
├── uv.lock              # Locked dependencies
└── .env                 # Environment variables
```

### Database Design Principles
1. **Normalization**: Follow database normalization rules (at least 3NF)
2. **Indexes**: Add indexes on frequently queried columns
3. **Migrations**: Use Flask-Migrate for all schema changes
4. **Soft Deletes**: Implement soft deletes with `deleted_at` timestamps
5. **Timestamps**: Include `created_at` and `updated_at` in all tables
6. **UUID**: Consider using UUIDs for public-facing IDs

### API Design
1. **RESTful**: Follow REST principles for API design
2. **Versioning**: Implement API versioning (e.g., /api/v1/)
3. **Response Format**: Consistent JSON response structure
4. **Status Codes**: Use appropriate HTTP status codes
5. **Pagination**: Implement pagination for list endpoints
6. **Rate Limiting**: Add rate limiting to prevent abuse
7. **CORS**: Configure CORS properly for frontend access

### Frontend Development with shadcn/ui and Tailwind CSS

#### HTML/Template Guidelines
1. **Semantic HTML**: Use semantic HTML5 elements
2. **Accessibility**: Ensure WCAG 2.1 AA compliance
3. **Responsive Design**: Mobile-first approach
4. **Component Structure**: Create reusable Jinja2 macros for UI components

#### shadcn/ui Integration
1. **Component Usage**: Adapt shadcn/ui React components to vanilla HTML/JS
2. **Component Structure**: 
   ```html
   <!-- Example Button Component -->
   <button class="inline-flex items-center justify-center rounded-md text-sm font-medium 
                  ring-offset-background transition-colors focus-visible:outline-none 
                  focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 
                  disabled:pointer-events-none disabled:opacity-50
                  bg-primary text-primary-foreground hover:bg-primary/90
                  h-10 px-4 py-2">
     Click me
   </button>
   ```
3. **Color Scheme**: Use CSS variables for theming
   ```css
   :root {
     --background: 0 0% 100%;
     --foreground: 222.2 84% 4.9%;
     --primary: 222.2 47.4% 11.2%;
     --primary-foreground: 210 40% 98%;
     --secondary: 210 40% 96.1%;
     --secondary-foreground: 222.2 47.4% 11.2%;
     --muted: 210 40% 96.1%;
     --muted-foreground: 215.4 16.3% 46.9%;
     --accent: 210 40% 96.1%;
     --accent-foreground: 222.2 47.4% 11.2%;
     --destructive: 0 84.2% 60.2%;
     --destructive-foreground: 210 40% 98%;
     --border: 214.3 31.8% 91.4%;
     --input: 214.3 31.8% 91.4%;
     --ring: 222.2 84% 4.9%;
     --radius: 0.5rem;
   }
   ```

#### Tailwind CSS Configuration
1. **Custom Configuration**: Extend Tailwind with custom colors and fonts
2. **Utility Classes**: Use Tailwind utilities for styling
3. **Component Classes**: Create component classes for repeated patterns
4. **Dark Mode**: Implement dark mode support with `dark:` prefix
5. **Responsive Design**: Use Tailwind's responsive prefixes (sm:, md:, lg:, xl:)

### Security Best Practices
1. **Input Validation**: Validate all user inputs
2. **SQL Injection**: Use parameterized queries (SQLAlchemy ORM)
3. **XSS Prevention**: Escape all user-generated content
4. **CSRF Protection**: Enable Flask-WTF CSRF protection
5. **Authentication**: Implement secure session management
6. **File Uploads**: Validate file types and sizes
7. **Rate Limiting**: Implement rate limiting on sensitive endpoints
8. **HTTPS**: Enforce HTTPS in production

### Performance Optimization
1. **Caching**: Implement Redis caching for frequently accessed data
2. **Database Queries**: Optimize queries, use eager loading
3. **Asset Optimization**: Minify CSS/JS, optimize images
4. **CDN**: Use CDN for static assets
5. **Lazy Loading**: Implement lazy loading for images and heavy content
6. **Background Tasks**: Use Celery for long-running tasks

### Testing Requirements
1. **Unit Tests**: Minimum 80% code coverage
2. **Integration Tests**: Test all API endpoints
3. **Test Fixtures**: Use fixtures for test data
4. **Mocking**: Mock external services in tests
5. **CI/CD**: Set up automated testing in CI pipeline

### Package Management with uv

Use `uv` for all Python package management tasks:

#### Setup Commands
- **Initialize Project**: `uv init`
- **Install All Dependencies**: `uv sync`
- **Create Virtual Environment**: Automatic with `uv sync`

#### Dependency Management
- **Add Runtime Dependencies**: `uv add flask sqlalchemy psycopg2-binary redis celery`
- **Add Dev Dependencies**: `uv add --dev pytest black flake8 pytest-cov`
- **Update Dependencies**: `uv update`
- **Remove Dependencies**: `uv remove package_name`

#### Running Applications
- **Flask Development Server**: `uv run flask run`
- **Python Scripts**: `uv run python script.py`
- **Celery Worker**: `uv run celery -A app.celery worker`
- **Database Migrations**: `uv run flask db migrate`

#### Development Tasks
- **Run Tests**: `uv run pytest`
- **Format Code**: `uv run black .`
- **Lint Code**: `uv run flake8`
- **Coverage Report**: `uv run pytest --cov=app`

### pyproject.toml Configuration

The `pyproject.toml` file should include:
- Project metadata (name, version, description)
- Python version requirement (>=3.11 recommended)
- Dependencies list
- Development dependencies
- Tool configurations (black, flake8, pytest)

### Development Workflow
1. **Environment Setup**: Use `uv sync` to install all dependencies
2. **Run Application**: `uv run python run.py` for development
3. **Run Tests**: `uv run pytest` for testing
4. **Code Formatting**: `uv run black app/` for formatting
5. **Linting**: `uv run flake8 app/` for code quality
6. **Database Migrations**: `uv run flask db migrate` and `uv run flask db upgrade`
7. **Git Flow**: Use feature branches and pull requests
8. **Commit Messages**: Follow conventional commit format

### When to Split vs Keep Together

#### Keep Together When:
- Total lines < 200 per file
- Single responsibility is maintained
- Code is cohesive and related
- Team is small (1-3 developers)

#### Split When:
- File exceeds 300 lines
- Multiple unrelated features
- Different team members work on different parts
- Testing becomes difficult

#### Refactoring Guidelines:
- Start with everything in one file
- Extract when patterns emerge
- Move to blueprints when routes > 10
- Create services when business logic > 50 lines
- Split models when > 5 tables

### Monitoring and Logging
1. **Structured Logging**: Use JSON format for production logs
2. **Error Tracking**: Integrate Sentry or similar
3. **Performance Monitoring**: Track response times and throughput
4. **Health Checks**: Implement health check endpoints
5. **Metrics**: Collect and monitor application metrics

### Deployment Considerations
1. **Environment Variables**: Use .env files for configuration
2. **Docker**: Containerize the application
3. **Reverse Proxy**: Use Nginx or Caddy
4. **Process Manager**: Use Gunicorn or uWSGI
5. **Database Migrations**: Automate migration deployment
6. **Static Files**: Serve static files through web server
7. **Template Assets**: Configure Flask to serve CSS/JS from templates folder in development

### Flask Application Architecture

Modular Flask application structure:
- **app/__init__.py**: Application factory pattern for flexible configuration
- **app/routes/**: Blueprints for organizing routes by feature
- **app/services/**: Business logic separated from routes
- **app/models.py**: Database models with SQLAlchemy
- **app/utils.py**: Shared utility functions
- **config.py**: Configuration classes for different environments
- **run.py**: Entry point to run the application

### Template Organization

1. **Layout Templates** (`templates/layout/`)
   - `base.html` - Base layout with navigation and footer
   - Shared components included via Jinja2

2. **Page Templates** (`templates/pages/`)
   - `index.html` - Homepage
   - `dashboard.html` - User dashboard
   - `login.html` - Authentication pages
   - Each page extends base.html

3. **CSS** (`templates/css/`)
   - `tailwind.css` - Tailwind utilities and components
   - `main.css` - Custom application styles
   - Keep styles modular but not overly fragmented

4. **JavaScript** (`templates/js/`)
   - `app.js` - Main application logic
   - `api.js` - API interaction functions
   - Additional JS files as features grow

### Template Structure Guidelines

**Base Template (base.html)**:
- Include Tailwind CSS via CDN
- Load CSS files in order: tailwind.css, components.css, main.css
- Define blocks for title, content, extra_css, extra_js
- Include common components (navbar, footer)
- Load JavaScript files in order: utils.js, api.js, app.js

**Page Templates**:
- Extend base.html template
- Override title and content blocks
- Include component templates as needed
- Add page-specific CSS/JS in extra blocks

### Development Best Practices

1. **Separation of Concerns**: Routes handle HTTP, services handle business logic
2. **Blueprint Organization**: Group related routes in blueprints
3. **Service Layer**: Keep business logic in service modules
4. **DRY Principle**: Use utils.py for shared functions
5. **Clear Naming**: Use descriptive names for files and functions

### Code Organization Guidelines

#### Routes (app/routes/)
- Keep route functions thin (< 20 lines)
- Handle request/response only
- Delegate business logic to services
- Use blueprints for logical grouping

#### Services (app/services/)
- Contain business logic and algorithms
- Independent from Flask context
- Reusable across different routes
- Handle external API integrations

#### Models (app/models.py)
- One class per database table
- Include validation methods
- Add query helper methods
- Keep relationships clear

#### Utilities (app/utils.py)
- Shared helper functions
- Decorators for routes
- Common validation functions
- Date/time utilities

## Component Examples

### Form Component Pattern
```html
<!-- Use shadcn/ui form styling with Tailwind -->
<form class="space-y-8">
  <div class="space-y-2">
    <label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
      Email
    </label>
    <input type="email" 
           class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm 
                  ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium 
                  placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 
                  focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed 
                  disabled:opacity-50"
           placeholder="Enter your email">
  </div>
</form>
```

### Card Component Pattern
```html
<!-- shadcn/ui card with Tailwind -->
<div class="rounded-lg border bg-card text-card-foreground shadow-sm">
  <div class="flex flex-col space-y-1.5 p-6">
    <h3 class="text-2xl font-semibold leading-none tracking-tight">Card Title</h3>
    <p class="text-sm text-muted-foreground">Card description</p>
  </div>
  <div class="p-6 pt-0">
    <!-- Card content -->
  </div>
</div>
```

## AI Assistant Behavior

When developing this Flask application:

1. **Never hardcode sensitive data** - Always use environment variables
2. **Follow the project structure** - Maintain consistent file organization
3. **Write comprehensive tests** - Include unit and integration tests
4. **Document all code** - Add docstrings and inline comments where necessary
5. **Optimize for performance** - Consider caching and query optimization
6. **Ensure accessibility** - Follow WCAG guidelines for all UI components
7. **Validate all inputs** - Never trust user input
8. **Handle errors gracefully** - Provide meaningful error messages
9. **Use semantic HTML** - Improve SEO and accessibility
10. **Keep components reusable** - Create modular, reusable code

## Application Design Patterns

### Application Factory Pattern
Create Flask app in `app/__init__.py`:
- Initialize Flask with configuration
- Register blueprints from routes/
- Setup database and migrations
- Configure logging and error handlers

### Blueprint Pattern for Routes
Organize routes in `app/routes/`:
- `main.py`: Public pages (home, about)
- `auth.py`: Login, register, logout
- `api.py`: RESTful API endpoints
- Each blueprint handles specific feature area

### Service Layer Pattern
Business logic in `app/services/`:
- `crawler.py`: Web scraping logic
- `video.py`: Video generation with fal.ai
- Services are Flask-independent
- Return data, not HTTP responses

### Configuration Management
Environment-based config in `config.py`:
- `DevelopmentConfig`: Local development
- `ProductionConfig`: Production settings
- `TestingConfig`: Test environment
- Load from .env using python-dotenv

## Response Format

Always return consistent JSON responses:

```json
{
  "success": true,
  "data": {},
  "message": "Operation successful",
  "timestamp": "2024-01-01T00:00:00Z"
}
```

For errors:
```json
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid input",
    "details": {}
  },
  "timestamp": "2024-01-01T00:00:00Z"
}
```

## Environment Variables Template

```env
# Flask Configuration
FLASK_APP=app
FLASK_ENV=development
SECRET_KEY=your-secret-key

# Database
DATABASE_URL=postgresql://user:password@localhost/dbname

# Redis
REDIS_URL=redis://localhost:6379/0

# External APIs
FAL_API_KEY=your-fal-api-key
OPENAI_API_KEY=your-openai-api-key

# Security
JWT_SECRET_KEY=your-jwt-secret
SESSION_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax

# Email
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=your-email
MAIL_PASSWORD=your-password
```

Remember: Focus on creating a scalable, maintainable, and secure Flask application with beautiful UI using shadcn/ui components and Tailwind CSS.